<?php

namespace Modules\Flight\Controllers;

use App\Http\Controllers\Controller;
use App\Models\Request\Request as RequestRequest;
use Modules\Flight\Models\SeatType;
use Modules\Location\Models\LocationCategory;
use Modules\Flight\Models\Flight;
use Illuminate\Http\Request;
use Modules\Location\Models\Location;
use Modules\Review\Models\Review;
use Modules\Core\Models\Attributes;
use DB;
use Illuminate\Support\Facades\Http;


class FlightController extends Controller
{
    protected $flightClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct(Flight $flightClass, Location $locationClass)
    {
        $this->flightClass = $flightClass;
        $this->locationClass = $locationClass;
    }

    public function callAction($method, $parameters)
    {
        if (!Flight::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function getAccessToken()
    {
        $url = 'https://satgurudmc.com/reseller/oauth2/token';

        $response = Http::withoutVerifying()->post($url, [
            'grant_type' => 'client_credentials',
            'client_id' => 'b09624d66d354c1bb3d5dc3ede2bdb42',
            'client_secret' => 'f267ec31e2774be3b7a189e3d0e25d8b',
            'scope' => 'read:flights-search write:flights-book'
        ]);

        if ($response->successful()) {
            $accessToken = $response->json()['access_token'];
            // Use $accessToken as needed
            // return response()->json(['access_token' => $accessToken]);
            return $accessToken;
        } else {
            // Handle error cases
            $error = $response->json();
            return response()->json($error, $response->status());
        }
    }

    public function getCheckAccessToken($prevToken)
    {
        $url = 'https://satgurudmc.com/reseller/oauth2/token';

        $response = Http::withoutVerifying()->post($url, [
            'grant_type' => 'client_credentials',
            'client_id' => 'b09624d66d354c1bb3d5dc3ede2bdb42',
            'client_secret' => 'f267ec31e2774be3b7a189e3d0e25d8b',
            'scope' => 'read:flights-search write:flights-book'
        ]);

        if ($response->successful()) {
            $accessToken = $response->json()['access_token'];
            // Use $accessToken as needed
            // return response()->json(['access_token' => $accessToken]);
            if($accessToken == $prevToken){
                return response()->json(['access_token' => $accessToken, 'message' => 'unauthorised', 'status' => 200]);
            }else{
                return response()->json(['access_token' => $accessToken, 'message' => 'authorised', 'status' => 400]);
            }
        } else {
            // Handle error cases
            $error = $response->json();
            return response()->json($error, $response->status());
        }
    }

    public function searchFlightss()
    {
        // Get access token
        $accessToken = $this->getAccessToken();
        
        if (!$accessToken) {
            // Handle if unable to retrieve access token
            return response()->json(['error' => 'Unable to obtain access token'], 500);
        }

        // Prepare data for the second API call
        $apiUrl = 'https://satgurudmc.com/reseller/api/flights/v1/search?perPage=5';
        $requestData = [
            "originDestinations" => [
                [
                    "origin" => [
                        "code" => "PAR"
                    ],
                    "destination" => [
                        "code" => "MAD"
                    ],
                    "date" => "2024-01-11"
                ]
            ],
            "passengers" => [
                "leaderNationality" => 158,
                "ptcList" => [
                    [
                        "ptc" => "ADT",
                        "count" => 2
                    ],
                    [
                        "ptc" => "CHD",
                        "count" => 2
                    ]
                ]
            ],
            "options" => [ "cabinClass" => "Y" ],
            "sellingChannel" => "B2B",
            "language" => "en_GB",
            "timeout" => 10
        ];

        // Make the request to the second API with the obtained access token
        $response = Http::withOptions(['verify' => false]) // Bypass SSL verification
            ->withHeaders([
                'Authorization' => 'Bearer ' . $accessToken,
                'Content-Type' => 'application/json',
            ])->post($apiUrl, $requestData);

        if ($response->successful()) {
            return $response->json();
        } else {
            // Handle error cases for the second API call
            $error = $response->json();
            return response()->json($error, $response->status());
        }
    }

    public function searchFlights($request)
    {
        // Check if the response is already stored in the session
        // if ($request->session()->has('api_response')) {
        //     $cachedResponse = $request->session()->get('api_response');
        //     return response()->json($cachedResponse);
        // }

        // Get access token
        $accessToken = $this->getAccessToken();

        if (!$accessToken || !isset($accessToken)) {
            // Handle if unable to retrieve access token
            return response()->json(['error' => 'Unable to obtain access token'], 500);
        }

        // $accessToken = $accessTokenResponse['access_token'];

        // Prepare data for the second API call
        $apiUrl = 'https://satgurudmc.com/reseller/api/flights/v1/search?perPage=10';
        $requestData = [
            "originDestinations" => [
                [
                    "origin" => [
                        "code" => "PAR"
                    ],
                    "destination" => [
                        "code" => "MAD"
                    ],
                    "date" => "2024-02-05"
                ]
            ],
            "passengers" => [
                "leaderNationality" => 158,
                "ptcList" => [
                    [
                        "ptc" => "ADT",
                        "count" => 2
                    ],
                    [
                        "ptc" => "CHD",
                        "count" => 2
                    ]
                ]
            ],
            "options" => [ "cabinClass" => "Y" ],
            "sellingChannel" => "B2B",
            "language" => "en_GB",
            "timeout" => 10
        ];

        try {
            // Make the request to the second API with the obtained access token
            $response = Http::withOptions(['verify' => false]) // Bypass SSL verification
            // $response = Http::withoutVerifying()
                ->withHeaders([
                    'Authorization' => 'Bearer ' . $accessToken,
                    'Content-Type' => 'application/json',
                ])->post($apiUrl, $requestData);
        


            if ($response->successful()) {
                $apiResponse = $response->json();
                // Store the API response in the session
                $request->session()->put('api_token', $accessToken);
                // Store the API response in the session
                // $request->session()->put('api_response', $apiResponse);

                return response()->json($apiResponse);
            } else {
                // Handle error cases for the second API call
                $error = $response->json();
                return response()->json($error, $response->status());
            }
        } catch (\Illuminate\Http\Client\RequestException $e) {
            // Handle request exception (including SSL errors)
            return response()->json(['error' => 'Request exception: ' . $e->getMessage()], 500);
        }
    }

    public function getFlightDmcData($request){
         $josnData = $this->searchFlights($request);
         $data = $josnData->getData();
        // echo "<pre>"; print_r($data); exit;
        $mainArr = [];
        $dataListsArr = $data->dataLists;
            $originDestinationList = $dataListsArr->originDestinationList;
            $flightList = $dataListsArr->flightList;
            $flightSegmentList = $dataListsArr->flightSegmentList;
        $srk = $data->srk;
        $offersArr = $data->offers;
        $tokensSearchResults = $data->tokens->searchResults;
        $_links = $data->_links;
        // $nextPage = $_links->nextPage;
        $arr = [];
        foreach($offersArr as $offersArr_key => $offersArr_val){
            $offerArray = [
                "index" => $offersArr_val->index,
                "upsellSupport" => $offersArr_val->upsellSupport,
            ];
            foreach($offersArr_val->flightsOverview as $offersArr_valKey => $offersArr_valValue){
                $offerArray["flightsOverview"]["itineraryIndex"][] = $offersArr_valValue->itineraryIndex;
                $offerArray["flightsOverview"]["flightReferences"][] = $offersArr_valValue->flightReferences;
                $offerArray["flightsOverview"]["flightReferencesArr"][$offersArr_valValue->flightReferences[0]] = $this->getFlighlistArr($flightList, $offersArr_valValue->flightReferences[0], $flightSegmentList);
            }
            $offerArray["fareDetails"]= $offersArr_val->fareDetails;
            $offerArray["offerItems"] = $offersArr_val->offerItems;
            $arr[]['offerArr'] = $offerArray;
        }
        $mainArr = [
            'arr' => $arr,
            'srk' => $srk,
            '_links' => $_links,
            'tokensSearchResults' => $tokensSearchResults
        ];
        //$arr['tokensSearchResults'] = $tokensSearchResults;
        // $arr['_links'] = $_links;
        //$arr['originDestinationList'] = $originDestinationList;
        // echo json_encode($arr);
        // exit;
        return $mainArr;
    }

    function getFlighlistArr($flightList, $key, $flightSegmentList){
        $returnArr = [];
        foreach($flightList as $flightListValue){
            // echo $key;
            // echo($flightListValue->key);
            // echo $flightListValue->key.' == '.$key;
            if($flightListValue->key == $key){
                // $getFlighlistArr['FlighlistArr'][] = $flightListValue;
                $returnArr[] = $this->getFlightSegementArr($flightSegmentList, $flightListValue->segmentReferences[0]);
            }
        }
        // exit;
        return $returnArr;
    }

    function getOffersArr($offersArr, $flightKey){
        $returnArr = [];
        foreach($offersArr as $offersArr_key => $offersArr_val){
            $flightsOverview = $offersArr_val->flightsOverview;
            foreach($flightsOverview as $flightsOverview_key => $flightsOverview_value){
                if(in_array($flightKey, $flightsOverview_value->flightReferences)){
                    $returnArr[] = $offersArr_val;
                }
            }
        }
        return $returnArr;
    }

    function getFlightSegementArr($flightSegmentList, $flightReferences){
        $returnArr = [];
        foreach($flightSegmentList as $flightSegmentList_key => $flightSegmentList_value){
            if($flightReferences == $flightSegmentList_value->key){
                $returnArr[] = $flightSegmentList_value;
            }
        }
        return $returnArr;
    }

    public function index(Request $request)
    {

        $is_ajax = $request->query('_ajax');

        if (!empty($request->query('limit'))) {
            $limit = $request->query('limit');
        } else {
            $limit = !empty(setting_item("flight_page_limit_item")) ? setting_item("flight_page_limit_item") : 9;
        }
        $query = $this->flightClass->search($request->input());
        $list = $query->paginate($limit);
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Flight::frontend.layouts.search.loop-grid', ['row' => $row, 'disable_lazyload' => 1, 'wrap_class' => 'infobox-item'])->render(),
                    'marker' => get_file_url(setting_item("flight_icon_marker_map"), 'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if (empty(setting_item("flight_location_search_style")) or setting_item("flight_location_search_style") == "normal") {
            $limit_location = 1000;
        }
        $data = [
            'rows'               => $list,
            'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translation'])->get()->toTree(),
            'seatType'           => SeatType::get(),
            'flight_min_max_price' => $this->flightClass::getMinMaxPrice(),
            'markers'            => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1,
            "seo_meta"           => $this->flightClass::getSeoMetaForPageList()
        ];
        $layout = setting_item("flight_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Flight::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'flight')->orderBy("position", "desc")->with(['terms' => function ($query) {
            $query->withCount('flight');
        }, 'translation'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Flight::frontend.search-map', $data);
        }
        $data['flightsData'] = $this->getFlightDmcData($request);
        // dd($data['flightsData']);
        return view('Flight::frontend.search', $data);
    }

    public function getFlight(Request $request)
    {
        // echo session()->get('api_token');
        // dd($request->all());
        $data['requestsAll'] = $request->all();
        // echo session()->get('api_token');
        // $data['fareFlightDetails'] = $this->getOfferDetails($data['requestsAll']['flightSrk'], $data['requestsAll']['offerArrIndex'], $data['requestsAll']['flightSearchToken'], 0);
        // $data['flightBrand'] = $this->getBrand($data['requestsAll']['flightSrk'], $data['requestsAll']['offerArrIndex'], $data['requestsAll']['flightSearchToken'], 0);
        // $data['flightUpsell'] = $this->getUpsell($data['requestsAll']['flightSrk'], $data['requestsAll']['offerArrIndex'], $data['requestsAll']['flightSearchToken'], 0);
        // dd($data);

        // get access token
        $accessToken = session()->get('api_token');
        
        // offersApi request url
        $offerApiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$data['requestsAll']['flightSrk']."/offers/".$data['requestsAll']['offerArrIndex'];

        $getToken = $data['requestsAll']['flightSearchToken'];
        $getItineraryIndex = $itineraryIndex ?? 0;
        // Display the data you are sending
        $requestData = [
            'token' => $getToken,
            'itineraryIndex' => $getItineraryIndex,
        ];

        $headers = [
            'Authorization' => 'Bearer ' . $accessToken,
            'Content-Type' => 'application/json',
        ];

        // $offerResponse = Http::withOptions(['verify' => false])
        //     ->withHeaders($headers)
        //     ->get($offerApiUrl, $requestData);

        // if ($offerResponse->successful()) {
        //     $fareFlightDetails = $offerResponse->json();
        //     // dd($fareFlightDetails);
        //     if(isset($fareFlightDetails['index'])){
        //         $data['fareFlightDetails'] = $fareFlightDetails;
        //     }else{
        //         return redirect('/flight')->with('error', 'Access token is not valid.');
        //     }
        //     // BrandApi request url
        //     $flightBrandApiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$data['requestsAll']['flightSrk']."/offers/".$data['requestsAll']['offerArrIndex']."/brand";

        //     $flightBrandResponse = Http::withOptions(['verify' => false])->withHeaders($headers)
        //     ->get($flightBrandApiUrl, $requestData);
        //     $brandFlightDetails = $flightBrandResponse->json();
            
        //     if(isset($brandFlightDetails['index'])){
        //         $data['brandFlightDetails'] = $brandFlightDetails;
        //     }else{
        //         return redirect('/flight')->with('error', 'Access token is not valid.');
        //     }

            // upsellApi request url
            $upsellApiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$data['requestsAll']['flightSrk']."/offers/".$data['requestsAll']['offerArrIndex']."/upsell";

            $upsellApiUrlResponse = Http::withOptions(['verify' => false])->withHeaders($headers)
            ->get($upsellApiUrl, $requestData);
            $upsellDetails = $upsellApiUrlResponse->json();
            // dd($upsellDetails);
            if(isset($upsellDetails['index'])){
                $data['upsellDetails'] = $upsellDetails;
            }else{
                return redirect('/flight')->with('error', 'Access token is not valid.');
            }

            // offerPriceDetails request url
            $offerPriceApiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$data['requestsAll']['flightSrk']."/offers/".$data['requestsAll']['offerArrIndex']."/availability?token=".$getToken;
            $requestPostDataa = [
                'itineraryIndex' => 0,
                'upsellCode' => 'ADNNAOB4'
            ];
            $offerPriceApiUrlResponse = Http::withOptions(['verify' => false])->withHeaders($headers)
            ->post($offerPriceApiUrl, $requestPostDataa);
            $offerPriceDetails = $offerPriceApiUrlResponse->json();
            // dd($offerPriceDetails);
            if(isset($offerPriceDetails['availabilityToken'])){
                $data['offerPriceDetails'] = $offerPriceDetails;
            }else{
                return redirect('/flight')->with('error', 'Access token is not valid.');
            }
            
            // fareRulesApi request url
            $fareRulesApiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$data['requestsAll']['flightSrk']."/offers/".$data['requestsAll']['offerArrIndex']."/availability/fareRules";
            $requestDataa = [
                'token' => $getToken,
                'availabilityToken' => $offerPriceDetails['availabilityToken'],
                'ptcIndex' => '0'
            ];
            $fareRulesApiUrlResponse = Http::withOptions(['verify' => false])->withHeaders($headers)
            ->get($fareRulesApiUrl, $requestDataa);
            $fareRulesDetails = $fareRulesApiUrlResponse->json();
            // dd($fareRulesDetails);
            
            if(isset($fareRulesDetails['index'])){
                $data['fareRulesDetails'] = $fareRulesDetails;
            }else{
                return redirect('/flight')->with('error', 'Access token is not valid.');
            }
            // echo $getToken;
            // dd($data);
        // } else {
        //     // Handle error cases for the second API call
        //     $error = $offerResponse->json();
        //     // response()->json($error, $response->status());
        //     return redirect('/')->with('error', $error);
        // }
        return view('Flight::frontend.detail', $data);
    }

    // fare flights (offerDetails)
    public function getOfferDetails($srk, $offerIndex, $token, $itineraryIndex = 0){
        // get access token
        $accessToken = session()->get('api_token');
        
        // request url
        $apiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$srk."/offers/".$offerIndex;

        $getToken = $token;
        $getItineraryIndex = $itineraryIndex ?? 0;
        
        // Display the data you are sending
        $requestData = [
            'token' => $getToken,
            'itineraryIndex' => $getItineraryIndex,
        ];

        $headers = [
            'Authorization' => 'Bearer ' . $accessToken,
            'Content-Type' => 'application/json',
        ];

        $response = Http::withOptions(['verify' => false])
            ->withHeaders($headers)
            ->get($apiUrl, $requestData);

        if ($response->successful()) {
            $data['fareFlightDetails'] = $response->json();
            
            if(isset($data['fareFlightDetails']['index'])){
                return view('Flight::frontend.layouts.details.fareFlightDetails', $data);
            }else{
                return redirect('/')->with('error', 'Access token is not valid.');
            }
        } else {
            // Handle error cases for the second API call
            $error = $response->json();
            return response()->json($error, $response->status());
        }
    }

    // fare get flight brand
    public function getBrand($srk, $offerIndex, $token, $itineraryIndex = 0){
        // get access token
        $accessToken = session()->get('api_token');
        
        // request url
        $apiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$srk."/offers/".$offerIndex."/brand";

        $getToken = $token;
        $getItineraryIndex = $itineraryIndex ?? 0;
        
        // Display the data you are sending
        $requestData = [
            'token' => $getToken,
            'itineraryIndex' => $getItineraryIndex,
        ];

        $headers = [
            'Authorization' => 'Bearer ' . $accessToken,
            'Content-Type' => 'application/json',
        ];

        $response = Http::withOptions(['verify' => false])
            ->withHeaders($headers)
            ->get($apiUrl, $requestData);

        if ($response->successful()) {
            return $data['fareFlightDetails'] = $response->json();
            // return view('Flight::frontend.layouts.details.fareFlightDetails', $data);
        } else {
            // Handle error cases for the second API call
            $error = $response->json();
            return response()->json($error, $response->status());
        }
    }

    // fare flight family
    public function getUpsell($srk, $offerIndex, $token, $itineraryIndex = 0){
        // get access token
        $accessToken = session()->get('api_token');
        
        // request url
        $apiUrl = "https://satgurudmc.com/reseller/api/flights/v1/search/results/".$srk."/offers/".$offerIndex."/upsell";

        $getToken = $token;
        $getItineraryIndex = $itineraryIndex ?? 0;
        
        // Display the data you are sending
        $requestData = [
            'token' => $getToken,
            'itineraryIndex' => $getItineraryIndex,
        ];

        $headers = [
            'Authorization' => 'Bearer ' . $accessToken,
            'Content-Type' => 'application/json',
        ];
        
        $response = Http::withOptions(['verify' => false])
            ->withHeaders($headers)
            ->get($apiUrl, $requestData);

        if ($response->successful()) {
            return $response->json();
        } else {
            // Handle error cases for the second API call
            $error = $response->json();
            return response()->json($error, $response->status());
        }
    }

    public function getData(Request $request, $id)
    {
        $row = $this->flightClass::with(['flightSeat.seatType', 'airportFrom', 'airportTo', 'airline', 'bookingPassengers'])->find($id);
        if (empty($row)) {
            return $this->sendError('no found');
        } else {
            // if (!empty($row->airline)) {
            //     $row->airline->append(['image_url']);
            // }
            $bookingPassengers = $row->bookingPassengers->countBy('seat_type')->toArray();
            if (!empty($row->flightSeat)) {
                foreach ($row->flightSeat as &$value) {
                    if (!empty($bookingPassengers[$value->seat_type])) {
                        $value->max_passengers = $value->max_passengers - $bookingPassengers[$value->seat_type];
                        if ($value->max_passengers < 0) {
                            $value->max_passengers = 0;
                        }
                    }
                    $value->price_html = format_money($value->price);
                    $value->number = 0;
                }
            }
            $row->departure_time_html = $row->departure_time->format('H:i');
            $row->departure_date_html = $row->departure_time->format('D, d M y');
            $row->arrival_time_html = $row->arrival_time->format('H:i');
            $row->arrival_date_html = $row->arrival_time->format('D, d M y');

            return $this->sendSuccess(['data' => $row->toArray()], 'founded');
        }
    }

    public function _getUpsellDetails(Request $request) {
        $offerArrIndex_ = $request->input('offerArrIndex_');
        $flightSearchToken_ = $request->input('flightSearchToken_');
        $flightSrk_ = $request->input('flightSrk_');
        $upsell = $this->getUpsell($flightSrk_, $offerArrIndex_, $flightSearchToken_, 0);
        // echo json_encode($upsell); exit;
        if(isset($upsell['index'])){
            $data['upsellDetails'] = $upsell;
            $view = view('Flight::frontend.layouts.details.2fareFamilyModalBody', $data);
            return $view;
            exit;
            // C:\wamp64\www\Mytravel.2.2.0\themes\Mytravel\Flight\Views\frontend\layouts\details\fareFamilyModalBody.blade.php
            // return $upsell;
        }else{
            return response()->json(['error'=>'Access token is not valid.']);
        }
        // print_r($upsell);exit;
        // print_r($request->all()); exit;
    }

    public function __getOfferDetails(){
        $offerArrIndex_ = $request->input('offerArrIndex_');
        $flightSearchToken_ = $request->input('flightSearchToken_');
        $flightSrk_ = $request->input('flightSrk_');
        $getOfferDetails = $this->getOfferDetails($flightSrk_, $offerArrIndex_, $flightSearchToken_, 0);
        if(isset($getOfferDetails['index'])){
            $data['getOfferDetails'] = $getOfferDetails;
            // $view = view('Flight::frontend.layouts.details.2fareFamilyModalBody', $data);
            return $data;
            exit;
            // C:\wamp64\www\Mytravel.2.2.0\themes\Mytravel\Flight\Views\frontend\layouts\details\fareFamilyModalBody.blade.php
            // return $upsell;
        }else{
            return response()->json(['error'=>'Access token is not valid.']);
        }

    }
    
}

